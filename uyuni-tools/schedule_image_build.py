import datetime
import os
import xmlrpc.client
import yaml
import argparse

import smtools


# Earliest possible start time for the build (Optional, default is immediately)
# Example: Now + 5 minutes
# Note: isoformat() typically includes microseconds. If your Python version is older than 3.7,
# it might not have fromisoformat(). For broader compatibility, we'll use strptime.
# We'll generate the string with a specific format here that strptime can then parse.
# datetime.datetime.now().isoformat() might generate more precision than needed,
# so let's format it explicitly if strptime is used.
# The default .isoformat() of datetime.datetime.now() usually looks like 'YYYY-MM-DDTHH:MM:SS.ffffff'
# We need to make sure our strptime format matches this.
EARLIEST_OCCURRENCE = (datetime.datetime.now() + datetime.timedelta(minutes=5)).isoformat(timespec='microseconds')

def schedule_image_build(profile_label, version, build_host_id, earliest_occurrence=None):
    """
    Schedules an image build in SuSE Manager.
    """
    earliest_occurrence_dt = None
    if earliest_occurrence:
        # --- MODIFICATION HERE FOR PYTHON 3.6 AND OLDER COMPATIBILITY ---
        try:
            # Preferred for Python 3.7+
            earliest_occurrence_dt = datetime.datetime.fromisoformat(earliest_occurrence)
        except AttributeError:
            # Fallback for Python versions < 3.7 (e.g., Python 3.6)
            # Need to match the format generated by .isoformat(timespec='microseconds')
            earliest_occurrence_dt = datetime.datetime.strptime(earliest_occurrence, "%Y-%m-%dT%H:%M:%S.%f")
    smt.image_schedule_image_build(profile_label, version, build_host_id, earliest_occurrence_dt)

def main():
    """
    Main function
    :return:
    """
    global smt
    parser = argparse.ArgumentParser(
        description="Schedules an image build in SuSE Manager."
    )
    parser.add_argument("-p", "--profile-label", type=str, required=True,
                        help="The label of the image profile to be built (e.g., 'my-custom-image-profile').")
    parser.add_argument("-i", "--image-version", type=str, required=True,
                        help="The version of the image (e.g., '1.0.0').")
    parser.add_argument("-b", "--build-host-id", type=int,
                        help="The System ID of the build host in SuSE Manager. If not provided, "
                             "--build-host-name will be used.")
    parser.add_argument("-n", "--build-host-name", type=str,
                        help="The hostname of the build system in SuSE Manager. "
                             "Used if --build-host-id is not provided.")
    args = parser.parse_args()

    smt = smtools.SMTools("create_software_project")
    # login to suse manager
    smt.log_info("Start")
    smt.suman_login()

    resolved_build_host_id = None
    if args.build_host_id:
        resolved_build_host_id = args.build_host_id
    elif args.build_host_name:
        smt.set_hostname(args.build_host_name)
        resolved_build_host_id = smt.systemid
    else:
        smt.log_error("Error: Either --build-host-id or --build-host-name must be provided.")
        parser.print_help()
        smt.exit_program(1)

    smt.log_info(f"\nScheduling Image Build with the following parameters:")
    smt.log_info(f"  Profile Label: {args.profile_label}")
    smt.log_info(f"  Image Version: {args.image_version}")
    smt.log_info(f"  Build Host ID: {resolved_build_host_id}")

    schedule_image_build(args.profile_label, args.image_version, resolved_build_host_id, EARLIEST_OCCURRENCE)
    smt.close_program()

if __name__ == "__main__":
    SystemExit(main())
